C51 COMPILER V9.59.0.0   OV7670                                                            02/27/2021 22:04:45 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE OV7670
OBJECT MODULE PLACED IN .\Objects\ov7670.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ov7670.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\ov7670.lst) TABS(2) OBJECT(.\Objects\ov7670.obj)

line level    source

   1          
   2          //摄像头模块 采用OV7670  分辨率为640x480   在实际应用中采用QVGA模式 即240x320 模式
   3          //程序上采用240x240的显示框 显示正向的效果
   4          //扫描方向为从左到右 从上到下
   5          //这样做虽然少了一部分的显示  但是在显示速度上又加快了好多
   6          #include  "stc8.h"
   7          #include  "ov7670.h"
   8          #include  "delay.h"
   9          #include  "sccb.h"
  10          #define u8 unsigned char
  11          #define u16 unsigned int
  12          #define u32 unsigned long
  13          //OV7670寄存器配置
  14          u8 code OV7670_reg[OV7670_REG_NUM][2]=
  15          {  
  16              /*以下为OV7670 QVGA RGB565参数    具体内容 可以参考资料里 ov7670中文版PDF资料*/
  17              {0x3a, 0x04},//dummy
  18            {0x40, 0x10},//565
  19            {0x12, 0x14},//@
  20          
  21          
  22          
  23            {0x17, 0x16},//行频开始高8位       
  24            {0x18, 0x04},//行频结束高8位
  25            {0x19, 0x02},//场频开始高8位
  26              {0x1a, 0x7a},//场频结束高8位
  27          
  28            {0x32, 0x80},//行频开始低3位bit[2:0]   行频结束低3位bit[5:3]
  29              {0x03, 0x0a},//位【3：2】场频结束低2位  位【1：0】场频开始低2位
  30          
  31            {0x0c, 0x0c},
  32              {0x15, 0x00},
  33            {0x3e, 0x00},//10
  34            {0x70, 0x00},
  35            {0x71, 0x01},
  36            {0x72, 0x11},
  37            {0x73, 0x09},//
  38                  
  39          
  40            {0xa2, 0x02},//15
  41              {0x11, 0x00}, //fenpin
  42            {0x7a, 0x20},
  43            {0x7b, 0x1c},
  44            {0x7c, 0x28},
  45                  
  46          
  47            {0x7d, 0x3c},//20
  48            {0x7e, 0x55},
  49            {0x7f, 0x68},
  50            {0x80, 0x76},
  51            {0x81, 0x80},
  52                  
  53            {0x82, 0x88},
  54            {0x83, 0x8f},
C51 COMPILER V9.59.0.0   OV7670                                                            02/27/2021 22:04:45 PAGE 2   

  55            {0x84, 0x96},
  56            {0x85, 0xa3},
  57            {0x86, 0xaf},
  58                  
  59            {0x87, 0xc4},//30
  60            {0x88, 0xd7},
  61            {0x89, 0xe8},
  62            {0x13, 0xe0},
  63            {0x00, 0x00},//AGC
  64                  
  65            {0x10, 0x00},
  66            {0x0d, 0x00},
  67            {0x14, 0x20},//0x38, limit the max gain
  68            {0xa5, 0x05},
  69            {0xab, 0x07},
  70                  
  71            {0x24, 0x75},//40
  72            {0x25, 0x63},
  73            {0x26, 0xA5},
  74            {0x9f, 0x78},
  75            {0xa0, 0x68},
  76                  
  77            {0xa1, 0x03},//0x0b,
  78            {0xa6, 0xdf},//0xd8,
  79            {0xa7, 0xdf},//0xd8,
  80            {0xa8, 0xf0},
  81            {0xa9, 0x90},
  82                  
  83            {0xaa, 0x94},//50
  84            {0x13, 0xe5},
  85            {0x0e, 0x61},
  86            {0x0f, 0x4b},
  87            {0x16, 0x02},
  88                  
  89              {0x1e, 0x17},//0x07,   //图像输出镜像控制.0x07, 0x027    5位 镜像   4位 竖直翻转
  90            {0x21, 0x02},
  91            {0x22, 0x91},
  92            {0x29, 0x07},
  93            {0x33, 0x0b},
  94                  
  95            {0x35, 0x0b},//60
  96            {0x37, 0x1d},
  97            {0x38, 0x71},
  98            {0x39, 0x2a},
  99            {0x3c, 0x78},
 100                  
 101            {0x4d, 0x40},
 102            {0x4e, 0x20},
 103            {0x69, 0x5d},
 104            {0x6b, 0x40},//PLL
 105            {0x74, 0x19},
 106            {0x8d, 0x4f},
 107                  
 108            {0x8e, 0x00},//70
 109            {0x8f, 0x00},
 110            {0x90, 0x00},
 111            {0x91, 0x00},
 112            {0x92, 0x00},//0x19,//0x66
 113                  
 114            {0x96, 0x00},
 115            {0x9a, 0x80},
 116            {0xb0, 0x84},
C51 COMPILER V9.59.0.0   OV7670                                                            02/27/2021 22:04:45 PAGE 3   

 117            {0xb1, 0x0c},
 118            {0xb2, 0x0e},
 119                  
 120            {0xb3, 0x82},//80
 121            {0xb8, 0x0a},
 122            {0x43, 0x14},
 123            {0x44, 0xf0},
 124            {0x45, 0x34},
 125                  
 126            {0x46, 0x58},
 127            {0x47, 0x28},
 128            {0x48, 0x3a},
 129            {0x59, 0x88},
 130            {0x5a, 0x88},
 131                  
 132            {0x5b, 0x44},//90
 133            {0x5c, 0x67},
 134            {0x5d, 0x49},
 135            {0x5e, 0x0e},
 136            {0x64, 0x04},
 137            {0x65, 0x20},
 138                  
 139            {0x66, 0x05},
 140            {0x94, 0x04},
 141            {0x95, 0x08},
 142            {0x6c, 0x0a},
 143            {0x6d, 0x55},
 144                  
 145                  
 146            {0x4f, 0x80},
 147            {0x50, 0x80},
 148            {0x51, 0x00},
 149            {0x52, 0x22},
 150            {0x53, 0x5e},
 151            {0x54, 0x80},
 152                  
 153            //{0x54, 0x40},//110
 154                  
 155            //{0x09, 0x03},//驱动能力最大   
 156            {0x6e, 0x11},//100
 157            {0x6f, 0x9f},//0x9e for advance AWB
 158              {0x55, 0x00},//亮度
 159              {0x56, 0x40},//对比度
 160              {0x57, 0x80},//0x40,  change according to Jim's request   
 161          };
 162          
 163          
 164          
 165          
 166          //写OV7660寄存器
 167          //返回：1-成功  0-失败
 168          //regID  寄存器地址  regDat  数据 
 169          u8 wr_Sensor_Reg(u8 regID, u8 regDat)
 170          {
 171   1      
 172   1       startSCCB(); //发送SCCB 总线开始传输命令
 173   1         
 174   1       if(SCCBwriteByte(0x42)==0)//写地址   
 175   1       {      
 176   2        stopSCCB();//发送SCCB 总线停止传输命令
 177   2      
 178   2        return(0);//错误返回
C51 COMPILER V9.59.0.0   OV7670                                                            02/27/2021 22:04:45 PAGE 4   

 179   2        
 180   2       }
 181   1        
 182   1       if(SCCBwriteByte(regID)==0)//寄存器ID
 183   1       {      
 184   2        stopSCCB();//发送SCCB 总线停止传输命令
 185   2        return(0); //错误返回
 186   2       }
 187   1      
 188   1       if(SCCBwriteByte(regDat)==0)//写数据到积存器
 189   1       {
 190   2        stopSCCB();//发送SCCB 总线停止传输命令
 191   2        return(0);//错误返回
 192   2       }
 193   1      
 194   1       stopSCCB();//发送SCCB 总线停止传输命令
 195   1         
 196   1      
 197   1       return(1);//成功返回
 198   1      }
 199          
 200          
 201          
 202          
 203          //读OV7660寄存器
 204          //返回：1-成功  0-失败
 205          //regID  寄存器地址  regDat  数据
 206          u8 rd_Sensor_Reg(u8 regID, u8 *regDat)
 207          {
 208   1       //通过写操作设置寄存器地址
 209   1      
 210   1       startSCCB();
 211   1      
 212   1       if(0==SCCBwriteByte(0x42))//写地址   手册11页上
 213   1       {
 214   2        stopSCCB();//发送SCCB 总线停止传输命令
 215   2        return(0);//错误返回
 216   2       }
 217   1      
 218   1       if(0==SCCBwriteByte(regID))//积存器ID
 219   1       {
 220   2        stopSCCB();//发送SCCB 总线停止传输命令
 221   2        return(0);//错误返回
 222   2       }
 223   1       stopSCCB();//发送SCCB 总线停止传输命令
 224   1        
 225   1       //设置寄存器地址后，才是读
 226   1       startSCCB();
 227   1      
 228   1       if(0==SCCBwriteByte(0x43))//读地址     手册11页上
 229   1       {
 230   2        stopSCCB();//发送SCCB 总线停止传输命令
 231   2        return(0);//错误返回
 232   2       }
 233   1        
 234   1       *regDat=SCCBreadByte();//返回读到的值
 235   1      
 236   1       noAck();//发送NACK命令
 237   1       stopSCCB();//发送SCCB 总线停止传输命令
 238   1      
 239   1       return(1);//成功返回
 240   1      }
C51 COMPILER V9.59.0.0   OV7670                                                            02/27/2021 22:04:45 PAGE 5   

 241          
 242          
 243          
 244          
 245          //Sensor_init()  摄像头芯片初始化
 246          //返回0成功，返回1失败
 247          //=================================================
 248          u8 Ov7670_init(void)
 249          {
 250   1       u8  i=0,
 251   1           tem1,tem2;
 252   1      
 253   1                
 254   1       if(0==wr_Sensor_Reg(0x12,0x80)) //Reset SCCB 复位SCCB
 255   1       {  
 256   2        return 1 ;//错误返回
 257   2       }
 258   1      
 259   1       if(0==rd_Sensor_Reg(0x0b, &tem1))//读ID  产品低字节识别号
 260   1       {
 261   2        return 1 ;//错误返回
 262   2       }
 263   1        if(0==rd_Sensor_Reg(0x0a, &tem2))//读ID 产品高字节识别号
 264   1       {
 265   2        return 1 ;//错误返回
 266   2       }
 267   1      
 268   1       if(tem1==0x73)//OV7670
 269   1       {  
 270   2        if(tem2==0x76)
 271   2        {     
 272   3        for(i=0;i<OV7670_REG_NUM;i++)       //写寄存器循环
 273   3        {
 274   4      
 275   4         if(0==wr_Sensor_Reg(OV7670_reg[i][0],OV7670_reg[i][1]))
 276   4         {  
 277   5        return 1;//错误返回
 278   5         }
 279   4        }
 280   3        return 0;
 281   3       }
 282   2       }
 283   1      return 1;  //错误返回
 284   1      } 
 285          
 286          
 287          //设置图像输出窗口
 288          //对QVGA设置。
 289          //sx  sy 为场频 和行频的初始值 这个值是ov本身厂家定的 在初始化里计数一下就能知道 场频是10  行频是176
 290          //width 为场频方向   height 为行频方向    
 291          //摄像头在初始的时候 就已经设置成QVGA格式 也就是说是320x240的分辨率
 292          //                   //那么在设置显示区域的时候不能超过这个个分辨率 否则也不会有多余的显示 注意！
 293          void OV7670_Window_Set(u16 sx,u16 sy,u16 width,u16 height)
 294          {
 295   1        u16 endx;
 296   1        u16 endy;                                    
 297   1        u8 temp; 
 298   1        endx=sx+width*2;  //V*2   一个颜色两个字节
 299   1        endy=sy+height*2;
 300   1        if(endy>784)endy-=784;    //这里要看时序图 784为行频的一个周期
 301   1      
 302   1      
C51 COMPILER V9.59.0.0   OV7670                                                            02/27/2021 22:04:45 PAGE 6   

 303   1        rd_Sensor_Reg(0X03,&temp);  //读取场频低字节
 304   1        temp&=0XF0;         //清低4位
 305   1        temp|=((endx&0X03)<<2)|(sx&0X03);  //将计算的低字节移入
 306   1      
 307   1        wr_Sensor_Reg(0X03,temp);    //写入
 308   1        wr_Sensor_Reg(0X19,sx>>2);
 309   1        wr_Sensor_Reg(0X1A,endx>>2);
 310   1      
 311   1        rd_Sensor_Reg(0X32,&temp);     //同上
 312   1        temp&=0XC0;
 313   1        temp|=((endy&0X07)<<3)|(sy&0X07);
 314   1      
 315   1        wr_Sensor_Reg(0X32,temp); 
 316   1          wr_Sensor_Reg(0X17,sy>>3);     //行频开始高8位
 317   1        wr_Sensor_Reg(0X18,endy>>3);   //行频结束高8位
 318   1      }
 319          
 320          
 321          
 322          //   以下语句为设置显示效果 函数  用的时候直接打开即可  
 323          
 324          
 325          //////////////////////////////////////////////////////////////////////////////
 326          ////OV7670功能设置
 327          ////白平衡设置
 328          ////0:自动
 329          ////1:太阳sunny
 330          ////2,阴天cloudy
 331          ////3,办公室office
 332          ////4,家里home
 333          //void OV7670_Light_Mode(unsigned char mode)
 334          //{
 335          //  unsigned char reg13val=0XE7;//默认就是设置为自动白平衡
 336          //  unsigned char reg01val=0;
 337          //  unsigned char reg02val=0;
 338          //  switch(mode)
 339          //  {
 340          //    case 1://sunny
 341          //      reg13val=0XE5;
 342          //      reg01val=0X5A;
 343          //      reg02val=0X5C;
 344          //      break;  
 345          //    case 2://cloudy
 346          //      reg13val=0XE5;
 347          //      reg01val=0X58;
 348          //      reg02val=0X60;
 349          //      break;  
 350          //    case 3://office
 351          //      reg13val=0XE5;
 352          //      reg01val=0X84;
 353          //      reg02val=0X4c;
 354          //      break;  
 355          //    case 4://home
 356          //      reg13val=0XE5;
 357          //      reg01val=0X96;
 358          //      reg02val=0X40;
 359          //      break;  
 360          //  }
 361          //  wr_Sensor_Reg(0X13,reg13val);//COM8设置 
 362          //  wr_Sensor_Reg(0X01,reg01val);//AWB蓝色通道增益 
 363          //  wr_Sensor_Reg(0X02,reg02val);//AWB红色通道增益 
 364          //} 
C51 COMPILER V9.59.0.0   OV7670                                                            02/27/2021 22:04:45 PAGE 7   

 365          //
 366          //
 367          //
 368          ////色度设置
 369          ////0:-2
 370          ////1:-1
 371          ////2,0
 372          ////3,1
 373          ////4,2
 374          //void OV7670_Color_Saturation(unsigned char sat)
 375          //{
 376          //  unsigned char reg4f5054val=0X80;//默认就是sat=2,即不调节色度的设置
 377          //  unsigned char reg52val=0X22;
 378          //  unsigned char reg53val=0X5E;
 379          //  switch(sat)
 380          //  {
 381          //    case 0://-2
 382          //      reg4f5054val=0X40;     
 383          //      reg52val=0X11;
 384          //      reg53val=0X2F;     
 385          //      break;  
 386          //    case 1://-1
 387          //      reg4f5054val=0X66;      
 388          //      reg52val=0X1B;
 389          //      reg53val=0X4B;    
 390          //      break;  
 391          //    case 3://1
 392          //      reg4f5054val=0X99;     
 393          //      reg52val=0X28;
 394          //      reg53val=0X71;     
 395          //      break;  
 396          //    case 4://2
 397          //      reg4f5054val=0XC0;     
 398          //      reg52val=0X33;
 399          //      reg53val=0X8D;     
 400          //      break;  
 401          //  }
 402          //  wr_Sensor_Reg(0X4F,reg4f5054val); //色彩矩阵系数1
 403          //  wr_Sensor_Reg(0X50,reg4f5054val); //色彩矩阵系数2 
 404          //  wr_Sensor_Reg(0X51,0X00);     //色彩矩阵系数3  
 405          //  wr_Sensor_Reg(0X52,reg52val);   //色彩矩阵系数4 
 406          //  wr_Sensor_Reg(0X53,reg53val);   //色彩矩阵系数5 
 407          //  wr_Sensor_Reg(0X54,reg4f5054val); //色彩矩阵系数6  
 408          //  wr_Sensor_Reg(0X58,0X9E);     //MTXS 
 409          //}
 410          ////亮度设置
 411          ////0:-2
 412          ////1:-1
 413          ////2,0
 414          ////3,1
 415          ////4,2
 416          //void OV7670_Brightness(unsigned char bright)
 417          //{
 418          //  unsigned char reg55val=0X00;//默认就是bright=2
 419          //    switch(bright)
 420          //  {
 421          //    case 0://-2
 422          //      reg55val=0XB0;     
 423          //      break;  
 424          //    case 1://-1
 425          //      reg55val=0X98;     
 426          //      break;  
C51 COMPILER V9.59.0.0   OV7670                                                            02/27/2021 22:04:45 PAGE 8   

 427          //    case 3://1
 428          //      reg55val=0X18;     
 429          //      break;  
 430          //    case 4://2
 431          //      reg55val=0X30;     
 432          //      break;  
 433          //  }
 434          //  wr_Sensor_Reg(0X55,reg55val); //亮度调节 
 435          //}
 436          ////对比度设置
 437          ////0:-2
 438          ////1:-1
 439          ////2,0
 440          ////3,1
 441          ////4,2
 442          //void OV7670_Contrast(unsigned char contrast)
 443          //{
 444          //  unsigned char reg56val=0X40;//默认就是contrast=2
 445          //    switch(contrast)
 446          //  {
 447          //    case 0://-2
 448          //      reg56val=0X30;     
 449          //      break;  
 450          //    case 1://-1
 451          //      reg56val=0X38;     
 452          //      break;  
 453          //    case 3://1
 454          //      reg56val=0X50;     
 455          //      break;  
 456          //    case 4://2
 457          //      reg56val=0X60;     
 458          //      break;  
 459          //  }
 460          //  wr_Sensor_Reg(0X56,reg56val); //对比度调节 
 461          //}
 462          ////特效设置
 463          ////0:普通模式    
 464          ////1,负片
 465          ////2,黑白   
 466          ////3,偏红色
 467          ////4,偏绿色
 468          ////5,偏蓝色
 469          ////6,复古      
 470          //void OV7670_Special_Effects(unsigned char eft)
 471          //{
 472          //  unsigned char reg3aval=0X04;//默认为普通模式
 473          //  unsigned char reg67val=0XC0;
 474          //  unsigned char reg68val=0X80;
 475          //  switch(eft)
 476          //  {
 477          //    case 1://负片
 478          //      reg3aval=0X24;
 479          //      reg67val=0X80;
 480          //      reg68val=0X80;
 481          //      break;  
 482          //    case 2://黑白
 483          //      reg3aval=0X14;
 484          //      reg67val=0X80;
 485          //      reg68val=0X80;
 486          //      break;  
 487          //    case 3://偏红色
 488          //      reg3aval=0X14;
C51 COMPILER V9.59.0.0   OV7670                                                            02/27/2021 22:04:45 PAGE 9   

 489          //      reg67val=0Xc0;
 490          //      reg68val=0X80;
 491          //      break;  
 492          //    case 4://偏绿色
 493          //      reg3aval=0X14;
 494          //      reg67val=0X40;
 495          //      reg68val=0X40;
 496          //      break;  
 497          //    case 5://偏蓝色
 498          //      reg3aval=0X14;
 499          //      reg67val=0X80;
 500          //      reg68val=0XC0;
 501          //      break;  
 502          //    case 6://复古
 503          //      reg3aval=0X14;
 504          //      reg67val=0XA0;
 505          //      reg68val=0X40;
 506          //      break;   
 507          //  }
 508          //  wr_Sensor_Reg(0X3A,reg3aval);//TSLB设置 
 509          //  wr_Sensor_Reg(0X68,reg67val);//MANU,手动U值 
 510          //  wr_Sensor_Reg(0X67,reg68val);//MANV,手动V值 
 511          //} 
 512          
 513          
 514          u8 cur_status=0;       //帧标志位  在interrupt.c函数中调用
 515          
 516          u8 ov7670_test(void)
 517          {
 518   1      // struct TFT_Pointer sp;  //定义触摸变量结构体
 519   1       u32  j;           //临时变量
 520   1       u8  sign=0;        //初始标志
 521   1      
 522   1      
 523   1      //   P1M0=0X00;   //P1口为仅输入状态
 524   1      //   P1M1=0Xff;
 525   1      
 526   1                   //开启中断目的为  判断VSYNC 为帧数据判断 当有触发的时候 为来一帧  
 527   1                                     //这个是时候开始往 缓存芯片 AL422B灌入一帧数据
 528   1                           //当来第二帧时 说明数据灌入完成 此时提取数据 进行显示
 529   1        IT0=1;         //边沿触发   
 530   1        EX0=1;               //外部中断0   P3.2口    
 531   1        EA   = 1;            // 开总中断 
 532   1        
 533   1        
 534   1      //  Lcd_WriteReg(0x0003,0x1028); //扫描方向设置为从上到下 从右到左
 535   1      //  Lcd_WR_Reg(0x0022);      //发送设置
 536   1      
 537   1      //  LCD_scan(6);
 538   1      
 539   1      
 540   1      //  GUI_sprintf_hzstr16x(240,0,"ov7670    ",White,Red);
 541   1      //  GUI_sprintf_hzstr16x(240,16,"摄像测试版",White,Blue);
 542   1        //GUI_sprintf_hzstr16x(240,224,  "      返回",White,Blue);
 543   1        
 544   1        if( Ov7670_init())   //初始化 ov7670  
 545   1        {                              //初始化不成功
 546   2         //GUI_sprintf_hzstr16x(60,150,"OV7670 Init Error!",White,Blue);
 547   2         Delay_Ms(800);
 548   2         EX0=0;        //关闭外部中断0
 549   2         EA=0;         //关闭总中断
 550   2         sign=1;
C51 COMPILER V9.59.0.0   OV7670                                                            02/27/2021 22:04:45 PAGE 10  

 551   2        }
 552   1      
 553   1      
 554   1      //  Lcd_WriteReg(0x0003,0x1030); //恢复扫描方向 为从左到右 从上到下
 555   1      //  Lcd_WR_Reg(0x0022);      //发送设置
 556   1      //  LCD_scan(6);
 557   1      
 558   1      
 559   1        if(sign==1)return 1;       //初始化 跳出函数 （没有插OV7670 或者没插好） 
 560   1      
 561   1        FIFO_OE=0;       //使能摄像头模块
 562   1                
 563   1      
 564   1        //摄像头 参数设置 
 565   1      //  OV7670_Light_Mode(0);
 566   1      //  OV7670_Color_Saturation(4);
 567   1      //  OV7670_Brightness(2);
 568   1      //  OV7670_Contrast(3);
 569   1      //  OV7670_Special_Effects(2);  
 570   1      
 571   1      
 572   1        OV7670_Window_Set(10,176,240,320);  //设置窗口
 573   1      
 574   1         
 575   1      
 576   1       //开始扫描 显示摄像头采集数据
 577   1       while(1)
 578   1       {
 579   2      
 580   2      //  Address_set(0,0,319,239);   //设置显示范围  显示为240*320    9341转换屏的扫描方向时 起始点也会变 那么xy
             -也会有所调换的
 581   2        if(cur_status==2)        //判断缓存区是否存好摄像数据
 582   2          { 
 583   3        
 584   3          FIFO_RRST=0;         //开始复位读指针 读取FIFO数据
 585   3            FIFO_RCLK=0;
 586   3            FIFO_RCLK=1;
 587   3            FIFO_RCLK=0;
 588   3            FIFO_RRST=1;         //复位读指针结束
 589   3            FIFO_RCLK=1;
 590   3      
 591   3      
 592   3      //    LCD_RS=1;          //拉高TFT 写数据端 
 593   3      
 594   3          for(j=0;j<76800;j++)     //分辨率为240x240   每个颜色点要两个字节 所以 240x240x2=57600  次
 595   3          {    
 596   4          FIFO_RCLK=0;       //每一次时钟跳变 读一次数据    
 597   4          S2BUF=P1;          //直接将高字节数据给P0
 598   4          FIFO_RCLK=1; 
 599   4      
 600   4          FIFO_RCLK=0;
 601   4          S2BUF=P1;                //直接将低字节数据给P7
 602   4          FIFO_RCLK=1;  
 603   4        
 604   4          }  
 605   3          EX0 = 1;           //显示完成开中断
 606   3          cur_status=0;        //显示完整个图片以后 将   cur_status置0  准备接收下一帧
 607   3          } 
 608   2        } 
 609   1        return 0;            //成功跳出
 610   1          
 611   1      }
C51 COMPILER V9.59.0.0   OV7670                                                            02/27/2021 22:04:45 PAGE 11  

 612          
 613          
 614          
 615          
 616          
 617          
 618           void zhen() interrupt 0 //外部中断0  P3.2  判断帧数据
 619           {
 620   1      
 621   1       
 622   1         if(cur_status==0) //如果此时状态为0，则说明是一个图像的开始，开始向FIFO罐入数据
 623   1          {
 624   2           FIFO_WRST=0;  //写复位
 625   2           FIFO_WRST=1;
 626   2           FIFO_WEN=1;   //写FIFO使能
 627   2           cur_status=1;   //标记为1
 628   2          }
 629   1         else 
 630   1          if(cur_status==1) //说明此处为图像的结束，亦即下一图像的开始
 631   1           {
 632   2             FIFO_WEN=0;    //写FIFO禁能
 633   2             FIFO_WRST=0;   //写复位
 634   2             FIFO_WRST=1;
 635   2             cur_status=2;  //标记为2  此时说明可以读取FIFO中的缓存数据
 636   2           }
 637   1        }
 638          
 639          
 640          
*** WARNING C294 IN LINE 609 OF ov7670.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    813    ----
   CONSTANT SIZE    =    228    ----
   XDATA SIZE       =      1      27
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
