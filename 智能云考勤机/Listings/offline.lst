C51 COMPILER V9.59.0.0   OFFLINE                                                           02/27/2021 22:04:44 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE OFFLINE
OBJECT MODULE PLACED IN .\Objects\offline.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE offline.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\offline.lst) TABS(2) OBJECT(.\Objects\offline.obj)

line level    source

   1          #include<STC8.h>
   2          #include<offline.h>
   3          #define uchar unsigned char
   4          //管脚定义
   5          sbit fwcs   =P1^7;///CS
   6          sbit fwsck  =P5^4;//CLK
   7          sbit fwsi   =P5^5;//DO(IO1)
   8          sbit fwso   =P1^6;//DI(IO0)
   9          
  10          //spi模拟写
  11          void w25wspi(uchar dat)
  12          {
  13   1        uchar i;
  14   1        for(i=0;i<8;i++)
  15   1        {
  16   2          if(dat & 0x80)
  17   2          {
  18   3            fwso=1;//用IO口电平表示需要写入的数据
  19   3          }
  20   2          else
  21   2          {
  22   3            fwso=0;
  23   3          }
  24   2          fwsck=1;//标准SPI在时钟信号上升沿写入
  25   2          dat=dat<<1;//向左移位，判断各位数据
  26   2          fwsck=0;//使下次循环中仍能从上升沿中读取数据
  27   2        }
  28   1        fwso=1;
  29   1        fwsck=0;
  30   1      }
  31          //spi模拟读
  32          uchar w25rspi()
  33          {
  34   1        uchar i;
  35   1        uchar rs;
  36   1        
  37   1        for(i=0;i<8;i++)
  38   1        {
  39   2          fwsck=0;
  40   2          rs=rs<<1;
  41   2          if(fwsi)
  42   2            rs=rs | 1;
  43   2          fwsck=1;//在下降沿读出
  44   2        }
  45   1        fwsck=0;
  46   1        return rs;
  47   1      }
  48          //双倍速读
  49          uchar w25frspi()
  50          {
  51   1        uchar i;
  52   1        uchar rs;
  53   1        for(i=0;i<4;i++)
  54   1        {
C51 COMPILER V9.59.0.0   OFFLINE                                                           02/27/2021 22:04:44 PAGE 2   

  55   2          rs=rs<<2;
  56   2          fwsck=0;
  57   2          if(fwsi)
  58   2            rs=rs | 0x02;
  59   2          if(fwso)
  60   2            rs=rs | 0x01;
  61   2          fwsck=1;
  62   2        }
  63   1        fwso=1;
  64   1        fwsck=0;
  65   1        return rs;
  66   1      }
  67          
  68          
  69          //读取状态寄存器1
  70          uchar readrs1()
  71          {
  72   1        uchar rs;
  73   1        fwcs=0;
  74   1        w25wspi(ReadStatusRegister1);
  75   1        rs=w25rspi();
  76   1        fwcs=1;
  77   1        return rs;
  78   1      }
  79          
  80          //读取状态寄存器2
  81          uchar readrs2()
  82          {
  83   1        uchar rs;
  84   1        fwcs=0;
  85   1        w25wspi(ReadStatusRegister2);
  86   1        rs=w25rspi();
  87   1        fwcs=1;
  88   1        return rs;
  89   1      }
  90          
  91          //读取状态寄存器3
  92          uchar readrs3()
  93          {
  94   1        uchar rs;
  95   1        fwcs=0;
  96   1        w25wspi(ReadStatusRegister3);
  97   1        rs=w25rspi();
  98   1        fwcs=1;
  99   1        return rs;
 100   1      }
 101          //初始化
 102          void init_w25q128()
 103          {
 104   1        int i,j;
 105   1        P1M1 = 0xC0;  //开漏 1.6 、1.7   P1口配置寄存器1
 106   1        P1M0 = 0xC0;  //开漏             P1口配置寄存器0
 107   1        P5M1 = 0x30;  //开漏 5.4 、5.5
 108   1        P5M0 = 0x30;  //开漏：开漏输出控制输出低电平为接地，控制输出高电平为高阻态
 109   1        fwcs=1;//cs较高进入断电状态 
 110   1        fwso=1;
 111   1        fwsck=0;
 112   1        //fwrst=1;
 113   1        for(j=0;j<200;j++)
 114   1        {
 115   2          for(i=0;i<200;i++);
 116   2        }
C51 COMPILER V9.59.0.0   OFFLINE                                                           02/27/2021 22:04:44 PAGE 3   

 117   1        reset_w25q128();
 118   1      }
 119          
 120          
 121          //复位w25q128
 122          void reset_w25q128()
 123          {
 124   1        uchar i;
 125   1        fwcs=0;
 126   1        w25wspi(EnableReset);
 127   1        fwcs=1;
 128   1        for(i=0;i<100;i++);
 129   1        fwcs=0;
 130   1        w25wspi(ResetDevice);
 131   1        fwcs=1;
 132   1        for(i=0;i<240;i++);
 133   1      }
 134          
 135          //读取数据
 136          //buf：读出数据缓冲区f
 137          //black_numb：块号
 138          //page_numb：页号
 139          //len:读取长度为 len+1，最多读256个字节
 140          //成功返回 1，失败返回 0
 141          uchar readdata(uchar * buf,uchar block_numb,uchar page_numb,uchar len)
 142          {
 143   1          uchar i,j;
 144   1          uchar rs[4];
 145   1          
 146   1          i=BUSY;
 147   1          j=0;
 148   1          //是否忙
 149   1          while(i==BUSY)
 150   1          {
 151   2            fwcs=0;
 152   2            w25wspi(ReadStatusRegister1);
 153   2            i=w25rspi();
 154   2            fwcs=1;
 155   2            i=i & BUSY;
 156   2            ms1(1);
 157   2            j++;
 158   2            if(j==128)
 159   2              return 0;
 160   2          }
 161   1          
 162   1          rs[0]=ReadData;
 163   1          rs[1]=block_numb;
 164   1          rs[2]=page_numb;
 165   1          rs[3]=0;
 166   1          
 167   1          fwcs=0;
 168   1          for(i=0;i<4;i++)
 169   1          {
 170   2            w25wspi(rs[i]);
 171   2          }
 172   1          for(i=0;i<len;i++)
 173   1          {
 174   2            buf[i]=w25rspi();
 175   2          }
 176   1          buf[len]=w25rspi();
 177   1          fwcs=1;
 178   1          return 1;
C51 COMPILER V9.59.0.0   OFFLINE                                                           02/27/2021 22:04:44 PAGE 4   

 179   1      }
 180          
 181          //双倍速读，
 182          uchar fastreaddata(uchar * buf,uchar block_numb,uchar page_numb,uchar len)
 183          {
 184   1          uchar i,j;
 185   1          uchar rs[4];
 186   1      
 187   1          i=BUSY;
 188   1          j=0;
 189   1          //是否忙
 190   1          while(i==BUSY)
 191   1          {
 192   2            fwcs=0;
 193   2            w25wspi(ReadStatusRegister1);
 194   2            i=w25rspi();
 195   2            fwcs=1;
 196   2            i=i & BUSY;
 197   2            ms1(1);
 198   2            j++;
 199   2            if(j==128)
 200   2              return 0;
 201   2          }
 202   1      
 203   1          rs[0]=FastReadData;
 204   1          rs[1]=block_numb;
 205   1          rs[2]=page_numb;
 206   1          rs[3]=0;
 207   1      
 208   1          fwcs=0;
 209   1          for(i=0;i<4;i++)
 210   1          {
 211   2            w25wspi(rs[i]);
 212   2          }
 213   1          P1M1 = 0xC0;
 214   1          P1M0 = 0x80;
 215   1          w25wspi(0x00);
 216   1          for(i=0;i<len;i++)
 217   1          {
 218   2            buf[i]=w25frspi();
 219   2          }
 220   1          buf[len]=w25frspi();
 221   1          P1M1 = 0xC0;
 222   1          P1M0 = 0xC0;
 223   1          fwcs=1;
 224   1          return 1;
 225   1      }
 226          
 227          //块擦除命令
 228          //block_numb：块号
 229          //成功返回 1，失败返回 0
 230          uchar eraseblock(uchar block_numb)
 231          {
 232   1        uchar i,j;
 233   1        
 234   1        //是否忙
 235   1        i=BUSY;
 236   1        j=0;
 237   1        while(i==BUSY)
 238   1        {
 239   2          ms1(1);
 240   2          fwcs=0;
C51 COMPILER V9.59.0.0   OFFLINE                                                           02/27/2021 22:04:44 PAGE 5   

 241   2          w25wspi(ReadStatusRegister1);
 242   2          i=w25rspi();
 243   2          fwcs=1;
 244   2          i=i & BUSY;
 245   2          j++;
 246   2          if(j==128)
 247   2            return 0;
 248   2        }
 249   1      
 250   1        //写使能
 251   1        fwcs=0;
 252   1        w25wspi(WriteEnable);
 253   1        fwcs=1;
 254   1        
 255   1        //写使能执行是否完成
 256   1        i=0;
 257   1        j=0;
 258   1        while(i!=WEL)
 259   1        {
 260   2          ms1(1);
 261   2          fwcs=0;
 262   2          w25wspi(ReadStatusRegister1);
 263   2          i=w25rspi();
 264   2          fwcs=1;
 265   2          i=i & WEL;
 266   2          j++;
 267   2          if(j==254)
 268   2            return 0;
 269   2        }
 270   1        
 271   1        //执行擦除命令
 272   1        fwcs=0;
 273   1        w25wspi(SectorErase64k);
 274   1        w25wspi(block_numb);
 275   1        w25wspi(0);
 276   1        w25wspi(0);
 277   1        fwcs=1;
 278   1        
 279   1        //是否完成擦除
 280   1        i=BUSY;
 281   1        j=0;
 282   1        while(i==BUSY)
 283   1        {
 284   2          ms1(1);
 285   2          fwcs=0;
 286   2          w25wspi(ReadStatusRegister1);
 287   2          i=w25rspi();
 288   2          fwcs=1;
 289   2          i=i & BUSY;
 290   2          j++;
 291   2          if(j==254)
 292   2            return 0;
 293   2        }
 294   1        i=WEL;
 295   1        j=0;
 296   1        while(i==WEL)
 297   1        {
 298   2          ms1(1);
 299   2          fwcs=0;
 300   2          w25wspi(ReadStatusRegister1);
 301   2          i=w25rspi();
 302   2          fwcs=1;
C51 COMPILER V9.59.0.0   OFFLINE                                                           02/27/2021 22:04:44 PAGE 6   

 303   2          i=i & WEL;
 304   2          j++;
 305   2          if(j==254)
 306   2            return 0;
 307   2        }
 308   1        return 1;
 309   1      }
 310          //页编程
 311          //buf：要写入数据
 312          //black_numb：块号
 313          //page_numb：页号
 314          //len:编程长度为 len+1，最写入256个字节
 315          //成功返回 1，失败返回 0
 316          uchar pageprogramblock(uchar * buf,uchar block_numb,uchar page_numb,uchar len)
 317          {
 318   1        uchar i,j;
 319   1        i=BUSY;
 320   1        j=0;
 321   1        //是否忙
 322   1        while(i==BUSY)
 323   1        {
 324   2          ms1(1);
 325   2          fwcs=0;
 326   2          w25wspi(ReadStatusRegister1);
 327   2          i=w25rspi();
 328   2          fwcs=1;
 329   2          i=i & BUSY;
 330   2          j++;
 331   2          if(j==128)
 332   2            return 0;
 333   2        }
 334   1        
 335   1        //写使能
 336   1        fwcs=0;
 337   1        w25wspi(WriteEnable);
 338   1        fwcs=1;
 339   1      
 340   1        i=0;
 341   1        j=0;
 342   1        //写使能执行完成
 343   1        while(i!=WEL)
 344   1        {
 345   2          ms1(1);
 346   2          fwcs=0;
 347   2          w25wspi(ReadStatusRegister1);
 348   2          i=w25rspi();
 349   2          fwcs=1;
 350   2          i=i & WEL;
 351   2          j++;
 352   2          if(j==254)
 353   2            return 0;
 354   2        }
 355   1      
 356   1        //执行页编程
 357   1        fwcs=0;
 358   1        w25wspi(PageProgram);
 359   1        w25wspi(block_numb);
 360   1        w25wspi(page_numb);
 361   1        w25wspi(0);
 362   1        for(i=0;i<len;i++)
 363   1        {
 364   2          w25wspi(buf[i]);
C51 COMPILER V9.59.0.0   OFFLINE                                                           02/27/2021 22:04:44 PAGE 7   

 365   2        }
 366   1        w25wspi(buf[len]);
 367   1        fwcs=1;
 368   1        
 369   1        //是否完成页编程
 370   1        i=BUSY;
 371   1        j=0;
 372   1        while(i==BUSY)
 373   1        {
 374   2          ms1(1);
 375   2          fwcs=0;
 376   2          w25wspi(ReadStatusRegister1);
 377   2          i=w25rspi();
 378   2          fwcs=1;
 379   2          i=i & BUSY;
 380   2          j++;
 381   2          if(j==254)
 382   2            return 0;
 383   2        }
 384   1        i=WEL;
 385   1        j=0;
 386   1        while(i==WEL)
 387   1        {
 388   2          ms1(1);
 389   2          fwcs=0;
 390   2          w25wspi(ReadStatusRegister1);
 391   2          i=w25rspi();
 392   2          fwcs=1;
 393   2          i=i & WEL;
 394   2          j++;
 395   2          if(j==254)
 396   2            return 0;
 397   2        }
 398   1        return 1;
 399   1      }
 400          
 401          void ms1(uchar time)    //@22.1184MHz
 402          {
 403   1        uchar i, j, m;
 404   1        for(m=0;m<time;m++)
 405   1        {
 406   2          i = 29;
 407   2          j = 183;
 408   2          do
 409   2          {
 410   3            while (--j);
 411   3          } while (--i);
 412   2        }
 413   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1163    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      33
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
